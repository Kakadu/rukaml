let tests =
  [ "fack", "fack"
    (* ; "anon1", "../rv64/anon1"
  ; "empty", "../rv64/empty"
  ; "fac", "../rv64/fac"
  ; "fac_acc", "../rv64/fac_acc"  *)
    (* ; "fib_cps", "../rv64/fib_cps"
  ; "fib", "../rv64/fib"
  ; "fib_acc", "../rv64/fib_acc"
  ; "nikita2", "../rv64/nikita2"
  ; "nikita3", "../rv64/nikita3"
  ; "order1", "../rv64/order1"
  ; "pass_print", "../rv64/pass_print" *)
  ]
;;

let () =
  let pp1 ppf =
    Format.fprintf
      ppf
      {|
(rule
 (targets %s.ll)
 (deps
  (:src %s.ml))
 (mode
  (promote (until-clean)))
 (action
  (run
   ./compiler.exe
   -o
   %%{targets}
   %%{src})))
|}
  in
  let pp2 ppf =
    Format.fprintf
      ppf
      {|
(rule
 (targets %s.exe)
 (deps
  (:src %s.ll))
 ;  (mode
 ;   (promote (until-clean)))
 (action
  (run
   clang-18
   %%{src}
   ../../compiler/rukaml_stdlib.o
   -o
   %%{targets})))
|}
  in
  Out_channel.with_open_text "dune.tests" (fun ch ->
    let ppf = Format.formatter_of_out_channel ch in
    Format.fprintf ppf "; This file was autogenerated by 'ocaml gen.ml'\n";
    ListLabels.iter tests ~f:(fun (name, mlpath) ->
      Format.fprintf ppf "\n;;; %s\n\n" name;
      pp1 ppf name name;
      pp2 ppf name name;
      Format.fprintf
        ppf
        {|
(cram
 (applies_to %s)
 (deps
  %%{project_root}/back_rv64/rukaml_stdlib.o
  %s.ml 
  %s.ll
  %s.exe
  ;
  ))
  |}
        name
        mlpath
        name
        name;
      Out_channel.with_open_text (name ^ ".t") (fun ch ->
        Printf.fprintf
          ch
          "  $ qemu-riscv64 -L /usr/riscv64-linux-gnu -cpu rv64  ./%s_cpsoff.exe\n\n"
          name;
        flush ch);
      Format.pp_print_flush ppf ()))
;;
