let tests = [ "fibk5", "fibk5"; "fibk10", "fibk10"; "fibk15", "fibk15"; "fibst5", "fibst5"; "fack5", "fack5" ; "fack10", "fack10" ; "fack15", "fack15" ]

type mode =
  | CPSOff
  | CPSOn
  | CallArOn

let () =
  let pp1 ~mode ppf name suf path =
    Format.fprintf
      ppf
      {|
(rule
 (targets %s_%s.asm)
 (deps
  (:src %s.ml)
  (:stdlib %%{project_root}/back_amd64/rukaml_stdlib.o))
 ;  (mode
 ;   (promote (until-clean)))
 (action
  (run %%{project_root}/back_amd64/amd64_compiler.exe %%{src} -o %s_%s.asm %s)))
|}
      name
      suf
      path
      name
      suf
    @@
    match mode with
    | CPSOff -> "--no-start\n"
    | CPSOn -> "-cps\n"
    | CallArOn -> "-cps\n    -call_arity\n"
  in
  let pp2 ppf name =
    Format.fprintf
      ppf
      {|
(rule
 (targets %s.exe)
 (deps
  (:src %s.asm)
  (:stdlib %%{project_root}/back_amd64/rukaml_stdlib.o))
(mode
  (promote (until-clean)))
 (action
  (progn
   (run nasm -g -F dwarf -felf64 %%{src} -o %s.o)
   (run gcc -g -no-pie %s.o %%{stdlib} -o %s.exe))))
|}
      name
      name
      name
      name
      name
  in
  Out_channel.with_open_text "dune.tests" (fun ch ->
    let ppf = Format.formatter_of_out_channel ch in
    Format.fprintf ppf "; This file was autogenerated by 'ocaml gen.ml'\n";
    ListLabels.iter tests ~f:(fun (name, mlpath) ->
      Format.fprintf ppf "\n;;; %s\n\n" name;
      pp1 ppf name "call_ar_off" mlpath ~mode:CPSOn;
      pp1 ppf name "call_ar_on" mlpath ~mode:CallArOn;
      pp2 ppf (name ^ "_call_ar_off");
      pp2 ppf (name ^ "_call_ar_on");
      Format.fprintf
        ppf
        {|
(cram
 (applies_to %s)
 (deps %s.ml %s_call_ar_off.exe %s_call_ar_on.exe))
  |}
        name
        mlpath
        name
        name;
      Out_channel.with_open_text (name ^ ".t") (fun ch ->
        Printf.fprintf
          ch
          "  $ ./%s_call_ar_off.exe | grep  'Total closure allocations' \n\n"
          name;
        Printf.fprintf
          ch
          "  $ ./%s_call_ar_on.exe | grep  'Total closure allocations' \n\n"
          name;
        flush ch);
      Format.pp_print_flush ppf ()))
;;
